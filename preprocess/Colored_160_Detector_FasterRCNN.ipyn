{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15650,"status":"ok","timestamp":1691110968426,"user":{"displayName":"汪琪","userId":"00339852555721079050"},"user_tz":-600},"id":"L5_tfQXVSYxK","outputId":"eae48e70-4006-48aa-99ba-927f469d1f3d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple\n","Requirement already satisfied: Cython in /usr/local/lib/python3.10/dist-packages (0.29.36)\n","Collecting git+https://github.com/philferriere/cocoapi.git#subdirectory=PythonAPI\n","  Cloning https://github.com/philferriere/cocoapi.git to /tmp/pip-req-build-ms3_a5ll\n","  Running command git clone --filter=blob:none --quiet https://github.com/philferriere/cocoapi.git /tmp/pip-req-build-ms3_a5ll\n","  Resolved https://github.com/philferriere/cocoapi.git to commit 2929bd2ef6b451054755dfd7ceb09278f935f7ad\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Building wheels for collected packages: pycocotools\n","  Building wheel for pycocotools (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pycocotools: filename=pycocotools-2.0-cp310-cp310-linux_x86_64.whl size=331982 sha256=30b983e42cb0af76a628792562411cff4affaaa09b5f2aca12ba65225f832e3f\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-9u6ifa1k/wheels/8e/1a/5f/0c984ae3d65a4d7da4ba3407d2a8d8c8e85dd55f84d4936f04\n","Successfully built pycocotools\n","Installing collected packages: pycocotools\n","  Attempting uninstall: pycocotools\n","    Found existing installation: pycocotools 2.0.6\n","    Uninstalling pycocotools-2.0.6:\n","      Successfully uninstalled pycocotools-2.0.6\n","Successfully installed pycocotools-2.0\n"]}],"source":["# Install Cython\n","!pip install -i https://pypi.tuna.tsinghua.edu.cn/simple Cython\n","\n","# Install pycocotools\n","!pip install git+https://github.com/philferriere/cocoapi.git#subdirectory=PythonAPI"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":176435,"status":"ok","timestamp":1691111180305,"user":{"displayName":"汪琪","userId":"00339852555721079050"},"user_tz":-600},"id":"8eFraDBOtoGT","outputId":"4b7a9ac3-0e0f-4eb4-ff09-ae9dacd85596"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","\n","# Connect to Google Drive\n","drive.mount('/content/drive')\n","\n","# Copy the folder to the Colab environment\n","!cp -r \"/content/drive/MyDrive/code_folder\" \"/content/\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SnXiib8msWob"},"outputs":[],"source":["import torch\n","from torchvision.models.detection import FasterRCNN\n","from torchvision.models.detection.rpn import AnchorGenerator\n","from torchvision.transforms import functional as F\n","from torch.utils.data import DataLoader\n","from torchvision.datasets import CocoDetection"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6xEynhpcvH08"},"outputs":[],"source":["import json\n","import cv2"]},{"cell_type":"markdown","metadata":{"id":"ssYz4MkGVxMo"},"source":["The train_annotations_augmentation file I use was the old one, which doesn't include the label. So I insert the label from the train_annotations file given with the dataset. The output was just helping to show the step of process."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UDN5UxeXvLHT"},"outputs":[],"source":["import math\n","with open('/content/drive/MyDrive/code_folder/train_annotations_augmentation','r') as file:\n","    annotation_train=eval(file.read())\n","with open('/content/drive/MyDrive/code_folder/valid_annotations','r') as file:\n","    annotation_valid=eval(file.read())\n","with open('/content/drive/MyDrive/code_folder/train_annotations','r') as file:\n","    annotation=eval(file.read())\n","data1={}\n","for i in range(2000):\n","  annotation_train[i][\"category_id\"]=annotation[math.floor(i/4)][\"category_id\"]\n","data1[\"annotations\"]=annotation_train\n","images=[]\n","categories=[]\n","\n","image_path = \"/content/drive/MyDrive/code_folder/train/augmentation/\"\n","for i in range(2000):\n","  imge={}\n","  cate={}\n","  img=\"%d.jpg\"%(i)\n","  image = cv2.imread(image_path+img)\n","  height,width,_ = image.shape\n","  imge[\"id\"]=i\n","  imge[\"file_name\"]=img\n","  imge[\"width\"]=width\n","  imge[\"height\"]=height\n","  images.append(imge)\n","  id=annotation_train[i][\"category_id\"]\n","  if(id==1):\n","    name=\"penguin\"\n","  else:\n","    name=\"turtle\"\n","  cate[\"id\"]=id\n","  cate[\"name\"]=name\n","  categories.append(cate)\n","\n","data1[\"images\"]=images\n","data1[\"categories\"]=categories\n","with open(\"../train.json\", \"w\") as file:\n","    json.dump(data1, file)\n","\n","\n","#image_id_499.jpg"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z9p4wtLp3HKb"},"outputs":[],"source":["data2={}\n","'''\n","for i in range(72):\n","  annotation_train[i][\"category_id\"]-=1\n","'''\n","data2[\"annotations\"]=annotation_valid\n","\n","images=[]\n","categories=[]\n","\n","image_path = \"/content/drive/MyDrive/code_folder/valid/valid/\"\n","for i in range(72):\n","  imge={}\n","  cate={}\n","  if(i<10):\n","    img=\"image_id_00%d.jpg\"%(i)\n","  else:\n","    img=\"image_id_0%d.jpg\"%(i)\n","\n","\n","  image = cv2.imread(image_path+img)\n","  height,width,_ = image.shape\n","  imge[\"id\"]=i\n","  imge[\"file_name\"]=img\n","  imge[\"width\"]=width\n","  imge[\"height\"]=height\n","  images.append(imge)\n","  id=annotation_valid[i][\"category_id\"]\n","  if(id==1):\n","    name=\"penguin\"\n","  else:\n","    name=\"turtle\"\n","  cate[\"id\"]=id\n","  cate[\"name\"]=name\n","  categories.append(cate)\n","\n","data2[\"images\"]=images\n","data2[\"categories\"]=categories\n","with open(\"/content/drive/MyDrive/code_folder/valid.json\", \"w\") as file:\n","    json.dump(data2, file)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":126},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1691111190705,"user":{"displayName":"汪琪","userId":"00339852555721079050"},"user_tz":-600},"id":"ckFJXBXGsb6x","outputId":"578c5962-b286-4368-9c27-5fa425f67dda"},"outputs":[{"output_type":"stream","name":"stdout","text":["loading annotations into memory...\n","Done (t=0.01s)\n","creating index...\n","index created!\n"]},{"output_type":"execute_result","data":{"text/plain":["\"\\ntest_dataset = CocoDetection(root='/content/drive/MyDrive/9517project/valid_augmentation', annFile='/content/drive/MyDrive/9517project/valid.json', transforms=transform)\\ntest_dataloader = DataLoader(test_dataset, batch_size=2, shuffle=True, num_workers=2)\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":7}],"source":["from torchvision import transforms as T\n","import torchvision.datasets as datasets\n","from torchvision.transforms import functional as F\n","import random\n","import numpy as np\n","\n","font=cv2.FONT_HERSHEY_SIMPLEX\n","def collate_fn_coco(batch):\n","  return tuple(zip(*batch))\n","\n","class Compose(object):\n","    def __init__(self, transforms):\n","        self.transforms = transforms\n","\n","    def __call__(self, image, target):\n","        for t in self.transforms:\n","            image = t(image)\n","            for obj in target:\n","                obj['bbox'] = torch.tensor(np.array(obj['bbox']))\n","        return image, target\n","\n","transform=Compose([T.ToTensor()])\n","# Define your dataset and dataloader\n","train_dataset = CocoDetection(root='/content/drive/MyDrive/code_folder/augmentation', annFile='/content/drive/MyDrive/code_folder/train.json', transforms=transform)\n","\n","train_sampler=torch.utils.data.RandomSampler(train_dataset)\n","batch_sampler=torch.utils.data.BatchSampler(train_sampler,5,drop_last=True)\n","dataloader = DataLoader(train_dataset, batch_sampler=batch_sampler, num_workers=2,collate_fn=collate_fn_coco)\n","'''\n","test_dataset = CocoDetection(root='/content/drive/MyDrive/9517project/valid_augmentation', annFile='/content/drive/MyDrive/9517project/valid.json', transforms=transform)\n","test_dataloader = DataLoader(test_dataset, batch_size=2, shuffle=True, num_workers=2)\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7gya3vLfy8iy"},"outputs":[],"source":["from google.colab.patches import cv2_imshow\n","import matplotlib.pyplot as plt"]},{"cell_type":"markdown","metadata":{"id":"kMAwY7A4XPwG"},"source":["The following block is to show what \"true bounding boxes\" of the train_dataset are like"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":817},"executionInfo":{"elapsed":1284,"status":"ok","timestamp":1691111191984,"user":{"displayName":"汪琪","userId":"00339852555721079050"},"user_tz":-600},"id":"mXdDeX7kVwfA","outputId":"6558dff5-25b7-4685-8215-38a55719848a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=160x160>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=160x160>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=160x160>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=160x160>"],"image/png":"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\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=160x160>"],"image/png":"\n"},"metadata":{}}],"source":["#Visible for true bbox\n","idx=0\n","for imgs,labels in dataloader:\n","  idx+=1\n","  bboxes = []\n","  ids = []\n","  img = imgs[0]\n","  labels_ = labels[0]\n","  for label in labels_:\n","\n","    bboxes.append([label['bbox'][0],\n","    label['bbox'][1],\n","    label['bbox'][0] + label['bbox'][2],\n","    label['bbox'][1] + label['bbox'][3]\n","\n","    ])\n","\n","\n","    ids.append(label['category_id'])\n","\n","  img = img.permute(1,2,0).numpy()\n","  img = (img * 255).astype(np.uint8)\n","  img = cv2.cvtColor(img,cv2.COLOR_RGB2BGR)\n","\n","  for box ,id_ in zip(bboxes,ids):\n","    x1 = int(box[0])\n","    y1 = int(box[1])\n","    x2 = int(box[2])\n","    y2 = int(box[3])\n","    cv2.rectangle(img,(x1,y1),(x2,y2),(0,0,255),thickness=2)\n","    cv2.putText(img, text=str(id_), org=(x1 + 5, y1 + 5), fontFace=font, fontScale=1,\n","        thickness=2, lineType=cv2.LINE_AA, color=(0, 255, 0))\n","  cv2_imshow(img)\n","  cv2.waitKey()\n","  if(idx==5):\n","    break\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FEj-LQNMx64q"},"outputs":[],"source":["#This block doesn't need to be run, just in case if you need to clear the cache\n","\n","import torch\n","\n","\n","torch.cuda.empty_cache()\n"]},{"cell_type":"code","source":["!pip install scikit-optimize"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P5lxila2vhTp","executionInfo":{"status":"ok","timestamp":1691111195258,"user_tz":-600,"elapsed":3280,"user":{"displayName":"汪琪","userId":"00339852555721079050"}},"outputId":"a799571f-adcb-4dc6-9c98-5a8e891ffc56"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting scikit-optimize\n","  Downloading scikit_optimize-0.9.0-py2.py3-none-any.whl (100 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/100.3 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━\u001b[0m \u001b[32m92.2/100.3 kB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m100.3/100.3 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.3.1)\n","Collecting pyaml>=16.9 (from scikit-optimize)\n","  Downloading pyaml-23.7.0-py3-none-any.whl (17 kB)\n","Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.22.4)\n","Requirement already satisfied: scipy>=0.19.1 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.10.1)\n","Requirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.2.2)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from pyaml>=16.9->scikit-optimize) (6.0.1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.20.0->scikit-optimize) (3.2.0)\n","Installing collected packages: pyaml, scikit-optimize\n","Successfully installed pyaml-23.7.0 scikit-optimize-0.9.0\n"]}]},{"cell_type":"code","source":["import torchvision.models as models\n","from torchvision.models.detection import FasterRCNN\n","from torchvision.models.detection.rpn import AnchorGenerator\n","import torchvision.ops as ops\n","import torchvision.models as models\n","from sklearn.model_selection import ParameterGrid\n","from skopt import gp_minimize\n","from functools import partial\n","\n","device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\n","\n","test_dataset = CocoDetection(root='/content/drive/MyDrive/code_folder/valid/valid', annFile='/content/drive/MyDrive/code_folder/valid.json', transforms=transform)\n","test_sampler=torch.utils.data.RandomSampler(test_dataset)\n","batch_sampler=torch.utils.data.BatchSampler(test_sampler,2,drop_last=True)\n","test_dataloader = DataLoader(test_dataset, batch_sampler=batch_sampler, num_workers=2,collate_fn=collate_fn_coco)\n","'''\n","\n","backbone = models.vgg16(pretrained=True).features\n","backbone.out_channels = 512\n","'''\n","# Load pre-trained mobilenet_v2 model\n","backbone = models.mobilenet_v2(pretrained=True).features\n","backbone.out_channels = 1280\n","\n","roi_pooler =ops.MultiScaleRoIAlign(featmap_names=['0', '1'], output_size=5, sampling_ratio=2)\n","\n","model = FasterRCNN(backbone=backbone, num_classes=3, rpn_positive_fraction=1,rpn_anchor_generator=AnchorGenerator(sizes=((5,10,32,64,128,256,512,800,1024,2000,2500,3000,3500,4000,4500,5000,6000,10000,14000,16000,20000,25000),), aspect_ratios=((0.1,0.3,0.5,0.8,1.0,1.25,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5,5.5,6),)),box_roi_pool=roi_pooler)\n","optimizer = torch.optim.SGD(model.parameters(), lr=0.003, momentum=0.8)\n","model=model.to(device)\n","\n","\n","\n","'''\n","# Grid Search\n","best_score = 0.0\n","best_params = {}\n","for params in ParameterGrid(param_grid):\n","    print(\"Training with parameters:\", params)\n","\n","    # Update hyperparameters\n","    for key, value in params.items():\n","        setattr(model, key, value)\n","\n","    # Train the model\n","    model.train()\n","    for images, targets in dataloader:\n","      # Preprocess the images and targets\n","      images = [image.to(device) for image in images]\n","      targets=[target[0] for target in targets]\n","      for target in targets:\n","        xmin,ymin,width,height=target[\"bbox\"]\n","        ymax=ymin+height\n","        xmax=xmin+width\n","        target[\"boxes\"]=torch.tensor(np.expand_dims(np.array([xmin,ymin,xmax,ymax]),axis=0)).to(device)\n","        target[\"labels\"]=torch.tensor(np.expand_dims(np.array(target[\"category_id\"]),axis=0)).to(device)\n","\n","\n","      # Forward pass\n","      optimizer.zero_grad()\n","      losses = model(images, targets)\n","      total_loss = sum(loss for loss in losses.values())\n","\n","      # Backpropagation\n","      total_loss.backward()\n","      optimizer.step()\n","\n","\n","    # Evaluate the model\n","    model.eval()\n","    total_scores=[]\n","    for images, targets in test_dataloader:\n","      images = [image.to(device) for image in images]\n","      predictions = model(images)\n","      boxes=[prediction[\"boxes\"].to(device)for prediction in predictions]\n","      targets=[target[0] for target in targets]\n","      for j in range(len(predictions)):\n","        prediction=predictions[j]\n","        target=targets[j]\n","        labelss=prediction[\"labels\"]\n","        scores=prediction[\"scores\"]\n","        c1=0\n","        c2=0\n","        for i in range(len(labelss)):\n","          if i==1:\n","            break\n","          total_scores.append(scores[i].cpu().item())\n","    score=sum(score for score in total_scores)\n","    # Update best hyperparameters based on evaluation score\n","    if score > best_score:\n","        best_score = score\n","        best_params = params\n","'''\n","\n","# Define the hyperparameter grid for Bayesian Optimization\n","param_space = [\n","    (0.4, 0.7),          # rpn_nms_thresh\n","    (0.5, 0.8),          # rpn_fg_iou_thresh\n","    (0.2, 0.4),          # rpn_bg_iou_thresh\n","    (200, 400)           # box_detections_per_img\n","]\n","\n","# Define the objective function for Bayesian Optimization\n","def objective_function(params, model, test_dataloader):\n","    print(\"Training with parameters:\", params)\n","\n","    # Update hyperparameters\n","    model.rpn_nms_thresh, model.rpn_fg_iou_thresh, model.rpn_bg_iou_thresh, model.box_detections_per_img = params\n","    model.train()\n","    for images, targets in dataloader:\n","      # Preprocess the images and targets\n","      images = [image.to(device) for image in images]\n","      targets=[target[0] for target in targets]\n","      for target in targets:\n","        xmin,ymin,width,height=target[\"bbox\"]\n","        ymax=ymin+height\n","        xmax=xmin+width\n","        target[\"boxes\"]=torch.tensor(np.expand_dims(np.array([xmin,ymin,xmax,ymax]),axis=0)).to(device)\n","        target[\"labels\"]=torch.tensor(np.expand_dims(np.array(target[\"category_id\"]),axis=0)).to(device)\n","\n","\n","      # Forward pass\n","      optimizer.zero_grad()\n","      losses = model(images, targets)\n","      total_loss = sum(loss for loss in losses.values())\n","\n","      # Backpropagation\n","      total_loss.backward()\n","      optimizer.step()\n","\n","\n","    # Evaluate the model\n","    model.eval()\n","    total_scores=[]\n","    for images, targets in test_dataloader:\n","      images = [image.to(device) for image in images]\n","      predictions = model(images)\n","      boxes=[prediction[\"boxes\"].to(device)for prediction in predictions]\n","      targets=[target[0] for target in targets]\n","      for j in range(len(predictions)):\n","        prediction=predictions[j]\n","        target=targets[j]\n","        labelss=prediction[\"labels\"]\n","        scores=prediction[\"scores\"]\n","        c1=0\n","        c2=0\n","        for i in range(len(labelss)):\n","          if i==1:\n","            break\n","          total_scores.append(scores[i].cpu().item())\n","    score=sum(score for score in total_scores)\n","    # Update best hyperparameters based on evaluation score\n","\n","\n","\n","    return -score  # Return negative score since we want to maximize it\n","\n","\n","# Define the partial objective function with fixed arguments (model, test_dataloader)\n","objective_func = partial(objective_function, model=model, test_dataloader=test_dataloader)\n","\n","# Bayesian Optimization\n","best_score = 0.0\n","best_params = []\n","for i in range(3):  # Perform 3 iterations of Bayesian Optimization\n","    result = gp_minimize(func=objective_func, dimensions=param_space, n_calls=10, random_state=i)\n","    best_score = max(best_score, -result.fun)\n","    best_params = result.x\n","\n","print(\"Best hyperparameters:\", best_params)\n","\n","\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ueL5och6L9By","executionInfo":{"status":"ok","timestamp":1691117222188,"user_tz":-600,"elapsed":6026934,"user":{"displayName":"汪琪","userId":"00339852555721079050"}},"outputId":"9b5a1e94-ba4c-4769-e8d7-75960f81856c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["loading annotations into memory...\n","Done (t=0.00s)\n","creating index...\n","index created!\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=MobileNet_V2_Weights.IMAGENET1K_V1`. You can also use `weights=MobileNet_V2_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n","Downloading: \"https://download.pytorch.org/models/mobilenet_v2-b0353104.pth\" to /root/.cache/torch/hub/checkpoints/mobilenet_v2-b0353104.pth\n","100%|██████████| 13.6M/13.6M [00:00<00:00, 26.4MB/s]\n"]},{"output_type":"stream","name":"stdout","text":["Training with parameters: [0.5778533854675055, 0.7532797245743053, 0.3715891235245514, 369]\n","Training with parameters: [0.5870691090357917, 0.61531451218781, 0.25950692130889447, 211]\n","Training with parameters: [0.481796888374034, 0.643299535196405, 0.3624337457550987, 296]\n","Training with parameters: [0.517835438830249, 0.7508236290612134, 0.2674792320834537, 330]\n","Training with parameters: [0.5104724619521644, 0.7871465476859141, 0.22807015608252906, 374]\n","Training with parameters: [0.5420824135821132, 0.7402732255938933, 0.304095495910241, 336]\n","Training with parameters: [0.616189796417775, 0.6746059376225322, 0.30747464588980217, 352]\n","Training with parameters: [0.4317722821563377, 0.6420801258039973, 0.237266468665352, 347]\n","Training with parameters: [0.4649651063273116, 0.5405654520216356, 0.26482820155864284, 230]\n","Training with parameters: [0.46669641647547633, 0.6159466943377586, 0.380519695105881, 290]\n","Training with parameters: [0.6991554432816606, 0.7797672078015978, 0.22562488958587137, 400]\n","Training with parameters: [0.47082669308559283, 0.6189742181888078, 0.2775821482324015, 334]\n","Training with parameters: [0.6806617212418096, 0.7538932750058052, 0.262654703386455, 305]\n","Training with parameters: [0.533035868133867, 0.5688731641189477, 0.3068827817894034, 383]\n","Training with parameters: [0.5371614423960965, 0.6292095701554126, 0.3878255578847252, 356]\n","Training with parameters: [0.6147911547905093, 0.7408272511812095, 0.2185601617281476, 304]\n","Training with parameters: [0.659506075593695, 0.7487440722101426, 0.3659206718788368, 255]\n","Training with parameters: [0.4177729603904691, 0.7011584120206837, 0.31861310365961143, 334]\n","Training with parameters: [0.523536363690716, 0.5592652693954344, 0.2579259281091625, 228]\n","Training with parameters: [0.6349943418084659, 0.6237616524509079, 0.20683426223716783, 325]\n","Training with parameters: [0.4555246234519621, 0.7794622597463337, 0.38954612230557567, 297]\n","Training with parameters: [0.4961609311334822, 0.5463280019267991, 0.3397725382734403, 224]\n","Training with parameters: [0.5455527728799595, 0.6898213191802811, 0.36364534427097756, 337]\n","Training with parameters: [0.5495683510159957, 0.6760390934000311, 0.34395084647139185, 252]\n","Training with parameters: [0.5638621959706474, 0.6221923496869836, 0.23539692473358734, 394]\n","Training with parameters: [0.4891055071323063, 0.5863606447610014, 0.22323866351921995, 236]\n","Training with parameters: [0.5482869303153723, 0.6697295387670666, 0.24436703340254082, 353]\n","Training with parameters: [0.5731924206387093, 0.5503469932104368, 0.2734942737247694, 294]\n","Training with parameters: [0.5962798546621274, 0.7379269231227862, 0.3326123586101721, 323]\n","Training with parameters: [0.697255598559985, 0.5358454394987939, 0.2297129566978698, 370]\n","Best hyperparameters: [0.5962798546621274, 0.7379269231227862, 0.3326123586101721, 323]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6050,"status":"ok","timestamp":1691117934792,"user":{"displayName":"汪琪","userId":"00339852555721079050"},"user_tz":-600},"id":"3pm-N7qw4ZYP","outputId":"b38b3c3a-0679-4186-8df0-5740d2d24a9b"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=VGG16_Weights.IMAGENET1K_V1`. You can also use `weights=VGG16_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n","Downloading: \"https://download.pytorch.org/models/vgg16-397923af.pth\" to /root/.cache/torch/hub/checkpoints/vgg16-397923af.pth\n","100%|██████████| 528M/528M [00:03<00:00, 152MB/s]\n"]}],"source":["import torchvision.models as models\n","from torchvision.models.detection import FasterRCNN\n","from torchvision.models.detection.rpn import AnchorGenerator\n","import torchvision.ops as ops\n","import torchvision.models as models\n","\n","# Load vgg model\n","\n","backbone = models.vgg16(pretrained=True).features\n","backbone.out_channels = 512\n","'''\n","# Load pre-trained mobilenet_v2 model\n","backbone = models.mobilenet_v2(pretrained=True).features\n","backbone.out_channels = 1280\n","'''\n","roi_pooler =ops.MultiScaleRoIAlign(featmap_names=['0', '1'], output_size=5, sampling_ratio=2)\n","#model = FasterRCNN(backbone=backbone, num_classes=3, rpn_anchor_generator=AnchorGenerator(sizes=((128, 256, 512),), aspect_ratios=((0.5, 1.0, 2.0),)),box_detections_per_img=1,box_roi_pool=roi_pooler)\n","model = FasterRCNN(backbone=backbone,rpn_nms_thresh=0.6, rpn_fg_iou_thresh=0.7, rpn_bg_iou_thresh=0.3, num_classes=3, rpn_positive_fraction=1,rpn_anchor_generator=AnchorGenerator(sizes=((5,10,32,64,128,256,512,800,1024,2000,2500,3000,3500,4000,4500,5000,6000,10000,14000,16000,20000,25000),), aspect_ratios=((0.1,0.3,0.5,0.8,1.0,1.25,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5,5.5,6),)),box_detections_per_img=300,box_roi_pool=roi_pooler)\n","\n","\n","# Define your optimizer and loss function\n","optimizer = torch.optim.SGD(model.parameters(), lr=0.003, momentum=0.8)\n","#criterion = torch.nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5742,"status":"ok","timestamp":1691071115487,"user":{"displayName":"汪琪","userId":"00339852555721079050"},"user_tz":-600},"id":"_6ImgJe-Bdd9","outputId":"a55c6651-1e8d-4684-d567-3491328929c1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{},"execution_count":10}],"source":["pretrained_path =  '/content/drive/MyDrive/code_folder/160_epoch5_lr0.003_col_aug_vggcase2.pth'\n","pretrained_state_dict = torch.load(pretrained_path, map_location=torch.device('cuda'))\n","model.load_state_dict(pretrained_state_dict)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Kb4toCuvHK5b"},"outputs":[],"source":["device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\n","model=model.to(device)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2294159,"status":"ok","timestamp":1691120256010,"user":{"displayName":"汪琪","userId":"00339852555721079050"},"user_tz":-600},"id":"4IYjxc-e6NPz","outputId":"71a8499a-6239-4057-f5f1-07d93283b37f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 1, 10.0%  Loss: 0.7990111708641052\n","Epoch: 1, 20.0%  Loss: 1.0621471405029297\n","Epoch: 1, 30.0%  Loss: 0.36012160778045654\n","Epoch: 1, 40.0%  Loss: 0.3456973731517792\n","Epoch: 1, 50.0%  Loss: 0.48339366912841797\n","Epoch: 1, 60.0%  Loss: 0.37436193227767944\n","Epoch: 1, 70.0%  Loss: 0.22014552354812622\n","Epoch: 1, 80.0%  Loss: 0.23865948617458344\n","Epoch: 1, 90.0%  Loss: 0.34116658568382263\n","Epoch: 1, 100.0%  Loss: 0.34094932675361633\n","Epoch: 2, 10.0%  Loss: 0.2734696567058563\n","Epoch: 2, 20.0%  Loss: 0.36975523829460144\n","Epoch: 2, 30.0%  Loss: 0.2562953233718872\n","Epoch: 2, 40.0%  Loss: 0.16624511778354645\n","Epoch: 2, 50.0%  Loss: 0.25691601634025574\n","Epoch: 2, 60.0%  Loss: 0.2906742990016937\n","Epoch: 2, 70.0%  Loss: 0.31947532296180725\n","Epoch: 2, 80.0%  Loss: 0.25416505336761475\n","Epoch: 2, 90.0%  Loss: 0.23286180198192596\n","Epoch: 2, 100.0%  Loss: 0.22199216485023499\n","Epoch: 3, 10.0%  Loss: 0.3054501712322235\n","Epoch: 3, 20.0%  Loss: 0.23286816477775574\n","Epoch: 3, 30.0%  Loss: 0.39913442730903625\n","Epoch: 3, 40.0%  Loss: 0.30376318097114563\n","Epoch: 3, 50.0%  Loss: 0.20467524230480194\n","Epoch: 3, 60.0%  Loss: 0.17641334235668182\n","Epoch: 3, 70.0%  Loss: 0.1912318766117096\n","Epoch: 3, 80.0%  Loss: 0.1248181164264679\n","Epoch: 3, 90.0%  Loss: 0.22272223234176636\n","Epoch: 3, 100.0%  Loss: 0.2805079221725464\n","Epoch: 4, 10.0%  Loss: 0.23881010711193085\n","Epoch: 4, 20.0%  Loss: 0.2749822735786438\n","Epoch: 4, 30.0%  Loss: 0.2857038974761963\n","Epoch: 4, 40.0%  Loss: 0.3632974922657013\n","Epoch: 4, 50.0%  Loss: 0.21055863797664642\n","Epoch: 4, 60.0%  Loss: 0.24703094363212585\n","Epoch: 4, 70.0%  Loss: 0.23149709403514862\n","Epoch: 4, 80.0%  Loss: 0.303437739610672\n","Epoch: 4, 90.0%  Loss: 0.2736395299434662\n","Epoch: 4, 100.0%  Loss: 0.2790191173553467\n","Epoch: 5, 10.0%  Loss: 0.18770529329776764\n","Epoch: 5, 20.0%  Loss: 0.2594892680644989\n","Epoch: 5, 30.0%  Loss: 0.1448759138584137\n","Epoch: 5, 40.0%  Loss: 0.1951620727777481\n","Epoch: 5, 50.0%  Loss: 0.19361792504787445\n","Epoch: 5, 60.0%  Loss: 0.1901286393404007\n","Epoch: 5, 70.0%  Loss: 0.19863998889923096\n","Epoch: 5, 80.0%  Loss: 0.27029043436050415\n","Epoch: 5, 90.0%  Loss: 0.17419180274009705\n","Epoch: 5, 100.0%  Loss: 0.1331101655960083\n"]}],"source":["\n","model.train()\n","# Training loop\n","total=2000\n","for epoch in range(5):\n","  num=0\n","  for images, targets in dataloader:\n","    # Preprocess the images and targets\n","    images = [image.to(device) for image in images]\n","    targets=[target[0] for target in targets]\n","    for target in targets:\n","      num+=1\n","      xmin,ymin,width,height=target[\"bbox\"]\n","      ymax=ymin+height\n","      xmax=xmin+width\n","      target[\"boxes\"]=torch.tensor(np.expand_dims(np.array([xmin,ymin,xmax,ymax]),axis=0)).to(device)\n","      target[\"labels\"]=torch.tensor(np.expand_dims(np.array(target[\"category_id\"]),axis=0)).to(device)\n","\n","\n","    # Forward pass\n","    optimizer.zero_grad()\n","    losses = model(images, targets)\n","    total_loss = sum(loss for loss in losses.values())\n","\n","    # Backpropagation\n","    total_loss.backward()\n","\n","    # Update the parameters\n","    optimizer.step()\n","\n","    # Print the loss\n","    if(num%200==0):\n","      print(f\"Epoch: {epoch+1}, {num/total*100}%  Loss: {total_loss.item()}\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_OA3TukL9OSz"},"outputs":[],"source":["torch.save(model.state_dict(), '/content/drive/MyDrive/code_folder/160_epoch5_lr0.003_col_aug_vggcase2.pth')"]},{"cell_type":"markdown","metadata":{"id":"EB108V7dYO9I"},"source":["The following block shows the performance of our Faster-RCNN on the augmented training set."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1yEAaQfF3ucAx915I3fEsz4kL9NQwyaIb"},"id":"07mhlLyORCy9","outputId":"81cefd4a-07fc-420b-a533-76893fb4a376","executionInfo":{"status":"ok","timestamp":1691071157299,"user_tz":-600,"elapsed":32887,"user":{"displayName":"汪琪","userId":"00339852555721079050"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["def calculate_iou(box,target):\n","  pred_bbox,gt_bbox=box,target[\"bbox\"]\n","  if(len(gt_bbox))>0:\n","    '''\n","    print(gt_bbox)\n","    print(pred_bbox)\n","    '''\n","\n","    x1 = max(pred_bbox[0], gt_bbox[0])\n","    y1 = max(pred_bbox[1], gt_bbox[1])\n","    x2 = min(pred_bbox[2], gt_bbox[2]+gt_bbox[0])\n","    y2 = min(pred_bbox[3], gt_bbox[3]+gt_bbox[1])\n","\n","    intersection_area = max(0, x2 - x1 + 1) * max(0, y2 - y1 + 1)\n","    pred_bbox_area = (pred_bbox[2] - pred_bbox[0] + 1) * (pred_bbox[3] - pred_bbox[1] + 1)\n","    gt_bbox_area = (gt_bbox[2]+gt_bbox[0] - gt_bbox[0] + 1) * (gt_bbox[3]+gt_bbox[1] - gt_bbox[1] + 1)\n","\n","    iou = intersection_area / float(pred_bbox_area + gt_bbox_area - intersection_area)\n","    return iou\n","  else: return 0\n","\n","def calculate_distance(box,target):\n","  pred_bbox,gt_bbox=box,target[\"bbox\"]\n","  if(len(gt_bbox))>0:\n","    '''\n","    print(gt_bbox)\n","    print(pred_bbox)\n","    '''\n","    x1=(pred_bbox[0]+pred_bbox[2])/2\n","    x2=gt_bbox[0]+gt_bbox[2]/2\n","    y1=(pred_bbox[1]+pred_bbox[3])/2\n","    y2=gt_bbox[1]+gt_bbox[3]/2\n","    dis=np.sqrt(np.square((x1-x2).detach().cpu().numpy())+np.square((y1-y2).detach().cpu().numpy()))\n","    return dis\n","  else: return 0\n","\n","\n","test_dataset = CocoDetection(root='/content/drive/MyDrive/code_folder/valid/valid', annFile='/content/drive/MyDrive/code_folder/valid.json', transforms=transform)\n","model.eval()\n","test_sampler=torch.utils.data.RandomSampler(test_dataset)\n","batch_sampler=torch.utils.data.BatchSampler(test_sampler,2,drop_last=True)\n","test_dataloader = DataLoader(test_dataset, batch_sampler=batch_sampler, num_workers=2,collate_fn=collate_fn_coco)\n","total=0\n","TP=0\n","TN=0\n","FP=0\n","FN=0\n","predict_true=0\n","scores_1=[]\n","scores_2=[]\n","true_1=[]\n","true_2=[]\n","IOU=[]\n","Distance=[]\n","for images, targets in test_dataloader:\n","  images = [image.to(device) for image in images]\n","  predictions = model(images)\n","  boxes=[prediction[\"boxes\"].to(device)for prediction in predictions]\n","  targets=[target[0] for target in targets]\n","  for j in range(len(predictions)):\n","    prediction=predictions[j]\n","    target=targets[j]\n","    labelss=prediction[\"labels\"]\n","    scores=prediction[\"scores\"]\n","    c1=0\n","    c2=0\n","    for i in range(len(labelss)):\n","      if labelss[i].item()==1 and c1==0:\n","        c1=1\n","        scores_1.append(scores[i].cpu().item())\n","        true_1.append(target[\"category_id\"])\n","      if labelss[i].item()==2 and c2==0:\n","        c2=1\n","        scores_2.append(scores[i].cpu().item())\n","        true_2.append(target[\"category_id\"])\n","      if c1==1 or c2==1:\n","        break\n","\n","  for target in targets:\n","    xmin,ymin,width,height=target[\"bbox\"]\n","    ymax=ymin+height\n","    xmax=xmin+width\n","    target[\"boxes\"]=torch.tensor(np.expand_dims(np.array([xmin,ymin,xmax,ymax]),axis=0)).to(device)\n","    target[\"labels\"]=torch.tensor(np.expand_dims(np.array(target[\"category_id\"]),axis=0)).to(device)\n","    target[\"bbox\"]=torch.tensor(target[\"bbox\"]).to(device)\n","  labelss=[prediction[\"labels\"]for prediction in predictions]\n","  mark=[]\n","  for i in range(len(boxes)):\n","    if len(boxes[i]>0):\n","      boxes[i]=boxes[i][0]\n","      labelss[i]=labelss[i][0]\n","      mark.append(1)\n","    else:\n","      mark.append(0)\n","  for i in range(len(boxes)):\n","    total+=1\n","    if len(boxes[i]>0) and labelss[i].item()==targets[i][\"labels\"][0].item():\n","      predict_true+=1\n","    if len(boxes[i]>0) and labelss[i].item()==targets[i][\"labels\"][0].item()==1:\n","      TP+=1\n","    if len(boxes[i]>0) and labelss[i].item()==targets[i][\"labels\"][0].item()==2:\n","      TN+=1\n","    if len(boxes[i]>0) and labelss[i].item()==1 and targets[i][\"labels\"][0].item()==2:\n","      FP+=1\n","    if len(boxes[i]>0) and labelss[i].item()==2 and targets[i][\"labels\"][0].item()==1:\n","      FN+=1\n","  for i in range(len(images)):#2\n","    if mark[i]==0:\n","      continue\n","    img=images[i]\n","    target=targets[i]\n","    img = img.cpu().permute(1, 2, 0).numpy()\n","    img = (img * 255).astype(np.uint8)\n","    img = cv2.cvtColor(img,cv2.COLOR_RGB2BGR)\n","    box=boxes[i]\n","    x1 = int(box[0])\n","    y1 = int(box[1])\n","    x2 = int(box[2])\n","    y2 = int(box[3])\n","    if(len(box)>0):\n","      IOU.append(calculate_iou(box,target).detach().cpu().numpy().item())\n","      Distance.append(calculate_distance(box,target))\n","    id=str(labelss[i].item())+\"  IoU:\"+str(calculate_iou(box,target).detach().cpu().numpy())\n","    cv2.rectangle(img,(x1,y1),(x2,y2),(0,0,255),thickness=2)\n","    cv2.putText(img, text=str(id), org=(x1 + 5, y1 + 5), fontFace=font, fontScale=1,\n","      thickness=2, lineType=cv2.LINE_AA, color=(0, 255, 0))\n","    cv2_imshow(img)\n","    cv2.waitKey()\n","print(f\"The accuracy of classification is {predict_true/total}\")\n","print(f\"Class1 Precision is {TP/(TP+FP)}\")\n","print(f\"Class1 Recall is {TP/(TP+FN)}\")\n","print(f\"Class1 F1 score is {2*TP/(TP+FP)*TP/(TP+FN)/(TP/(TP+FP)+TP/(TP+FN))}\")\n","print(f\"Class2 Precision is {TN/(TN+FN)}\")\n","print(f\"Class2 Recall is {TN/(TN+FP)}\")\n","print(f\"Class2 F1 score is {2*TN/(TN+FN)*TN/(TN+FP)/(TN/(TN+FN)+TN/(TN+FP))}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":324,"status":"ok","timestamp":1691071519509,"user":{"displayName":"汪琪","userId":"00339852555721079050"},"user_tz":-600},"id":"5M87OWYBCwiw","outputId":"06536e1e-ef7d-49b2-f1b6-3dcd69e04a91"},"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n","+------------------+-----------+----------+\n","| True\\Predicted   |   Penguin |   Turtle |\n","+==================+===========+==========+\n","| Penguin          |        31 |        4 |\n","+------------------+-----------+----------+\n","| Turtle           |         2 |       32 |\n","+------------------+-----------+----------+\n"]}],"source":["from tabulate import tabulate\n","print(\"Confusion Matrix:\")\n","data=[\n","    ['True\\Predicted','Penguin','Turtle'],\n","    ['Penguin',TP,FN],\n","    ['Turtle',FP,TN]\n","]\n","print(tabulate(data, headers=\"firstrow\", tablefmt=\"grid\"))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":334,"status":"ok","timestamp":1691071522273,"user":{"displayName":"汪琪","userId":"00339852555721079050"},"user_tz":-600},"id":"pbRqEFf72CCi","outputId":"4eb227e9-a822-47b6-f89e-000dd61f57ab"},"outputs":[{"output_type":"stream","name":"stdout","text":["IoU mean: 0.5861404535995014\n","IoU std: 0.17140380581516934\n","Distance mean: 51.56956100463867\n","Distance std: 39.066890716552734\n","Successful images: 69\n"]}],"source":["Distance_mean=np.mean(np.array(Distance))\n","IOU_mean=np.mean(np.array(IOU))\n","Distance_std=np.std(np.array(Distance))\n","IOU_std=np.std(np.array(IOU))\n","print(f\"IoU mean: {IOU_mean}\")\n","print(f\"IoU std: {IOU_std}\")\n","print(f\"Distance mean: {Distance_mean}\")\n","print(f\"Distance std: {Distance_std}\")\n","print(f\"Successful images: {len(Distance)}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":325,"status":"ok","timestamp":1691071525087,"user":{"displayName":"汪琪","userId":"00339852555721079050"},"user_tz":-600},"id":"M6X3hteGINsy","outputId":"13a4a3aa-5da8-41dc-d37f-cd2cc89c8ec5"},"outputs":[{"output_type":"stream","name":"stdout","text":["[45.29843, 45.936035, 40.243156, 57.022465, 13.917924, 34.220787, 15.686528, 4.7229466, 9.946167, 40.78436, 115.86318, 92.57907, 32.797882, 16.509348, 32.560238, 35.251472, 33.989807, 141.12111, 23.756327, 12.356573, 25.486116, 17.491667, 120.05739, 44.841446, 47.421074, 77.531235, 71.23064, 19.017788, 21.288694, 33.68512, 31.704597, 13.272056, 59.645676, 116.29365, 107.55417, 24.841953, 57.353775, 25.67642, 34.820724, 110.20018, 49.092735, 74.790306, 58.091866, 11.250494, 32.72576, 6.16453, 16.617805, 82.38778, 33.544205, 73.759, 20.29099, 28.78934, 57.583397, 54.172607, 41.69387, 55.34151, 55.716473, 87.93403, 60.660976, 20.821259, 35.06802, 22.67075, 109.2646, 26.987888, 206.06131, 31.14822, 167.76888, 60.31809, 73.60502]\n"]}],"source":["print(Distance)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":817,"status":"ok","timestamp":1691071528253,"user":{"displayName":"汪琪","userId":"00339852555721079050"},"user_tz":-600},"id":"Db3JZwihUB8i","outputId":"4f68b03d-c9cb-44f9-8f95-26a92a22f236"},"outputs":[{"output_type":"stream","name":"stdout","text":["AP of class 1:0.7741935483870968\n","AP of class 2:0.5822701476423903\n","mAP of class 1 and 2:0.6782318480147436\n"]}],"source":["import numpy\n","import sklearn.metrics\n","\n","def precision_recall_1(y_true, pred_scores, thresholds):\n","    precisions = []\n","    recalls = []\n","\n","    for threshold in thresholds:\n","        y_pred = [1 if score >= threshold else 2 for score in pred_scores]\n","\n","        precision = sklearn.metrics.precision_score(y_true=y_true, y_pred=y_pred, pos_label=1)\n","        recall = sklearn.metrics.recall_score(y_true=y_true, y_pred=y_pred, pos_label=1)\n","\n","        precisions.append(precision)\n","        recalls.append(recall)\n","\n","    return precisions, recalls\n","\n","def precision_recall_2(y_true, pred_scores, thresholds):\n","    precisions = []\n","    recalls = []\n","\n","    for threshold in thresholds:\n","        y_pred = [2 if score >= threshold else 1 for score in pred_scores]\n","\n","        precision = sklearn.metrics.precision_score(y_true=y_true, y_pred=y_pred, pos_label=2)\n","        recall = sklearn.metrics.recall_score(y_true=y_true, y_pred=y_pred, pos_label=2)\n","\n","        precisions.append(precision)\n","        recalls.append(recall)\n","\n","    return precisions, recalls\n","y_true = true_1\n","pred_scores = scores_1\n","thresholds=numpy.arange(start=0.2, stop=0.7, step=(0.7-0.2)/len(y_true))\n","\n","precisions, recalls = precision_recall_1(y_true=y_true, pred_scores=pred_scores, thresholds=thresholds)\n","\n","precisions.append(1)\n","recalls.append(0)\n","\n","precisions = numpy.array(precisions)\n","recalls = numpy.array(recalls)\n","\n","AP1 = numpy.sum((recalls[:-1] - recalls[1:]) * precisions[:-1])\n","print(f\"AP of class 1:{AP1}\")\n","\n","y_true = true_2\n","pred_scores = scores_2\n","thresholds=numpy.arange(start=0.2, stop=0.7, step=(0.7-0.2)/len(y_true))\n","\n","precisions, recalls = precision_recall_2(y_true=y_true, pred_scores=pred_scores, thresholds=thresholds)\n","\n","precisions.append(1)\n","recalls.append(0)\n","\n","precisions = numpy.array(precisions)\n","recalls = numpy.array(recalls)\n","\n","AP2 = numpy.sum((recalls[:-1] - recalls[1:]) * precisions[:-1])\n","print(f\"AP of class 2:{AP2}\")\n","print(f\"mAP of class 1 and 2:{(AP1+AP2)/2}\")\n","\n","#code reference: https://blog.paperspace.com/mean-average-precision/"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1690521501026,"user":{"displayName":"汪琪","userId":"00339852555721079050"},"user_tz":-600},"id":"m5b8mZLNMdiW","outputId":"981e3881-457c-45bc-def2-9da7471cdb51"},"outputs":[{"name":"stdout","output_type":"stream","text":["Help on class FasterRCNN in module torchvision.models.detection.faster_rcnn:\n","\n","class FasterRCNN(torchvision.models.detection.generalized_rcnn.GeneralizedRCNN)\n"," |  FasterRCNN(backbone, num_classes=None, min_size=800, max_size=1333, image_mean=None, image_std=None, rpn_anchor_generator=None, rpn_head=None, rpn_pre_nms_top_n_train=2000, rpn_pre_nms_top_n_test=1000, rpn_post_nms_top_n_train=2000, rpn_post_nms_top_n_test=1000, rpn_nms_thresh=0.7, rpn_fg_iou_thresh=0.7, rpn_bg_iou_thresh=0.3, rpn_batch_size_per_image=256, rpn_positive_fraction=0.5, rpn_score_thresh=0.0, box_roi_pool=None, box_head=None, box_predictor=None, box_score_thresh=0.05, box_nms_thresh=0.5, box_detections_per_img=100, box_fg_iou_thresh=0.5, box_bg_iou_thresh=0.5, box_batch_size_per_image=512, box_positive_fraction=0.25, bbox_reg_weights=None, **kwargs)\n"," |  \n"," |  Implements Faster R-CNN.\n"," |  \n"," |  The input to the model is expected to be a list of tensors, each of shape [C, H, W], one for each\n"," |  image, and should be in 0-1 range. Different images can have different sizes.\n"," |  \n"," |  The behavior of the model changes depending on if it is in training or evaluation mode.\n"," |  \n"," |  During training, the model expects both the input tensors and targets (list of dictionary),\n"," |  containing:\n"," |      - boxes (``FloatTensor[N, 4]``): the ground-truth boxes in ``[x1, y1, x2, y2]`` format, with\n"," |        ``0 <= x1 < x2 <= W`` and ``0 <= y1 < y2 <= H``.\n"," |      - labels (Int64Tensor[N]): the class label for each ground-truth box\n"," |  \n"," |  The model returns a Dict[Tensor] during training, containing the classification and regression\n"," |  losses for both the RPN and the R-CNN.\n"," |  \n"," |  During inference, the model requires only the input tensors, and returns the post-processed\n"," |  predictions as a List[Dict[Tensor]], one for each input image. The fields of the Dict are as\n"," |  follows:\n"," |      - boxes (``FloatTensor[N, 4]``): the predicted boxes in ``[x1, y1, x2, y2]`` format, with\n"," |        ``0 <= x1 < x2 <= W`` and ``0 <= y1 < y2 <= H``.\n"," |      - labels (Int64Tensor[N]): the predicted labels for each image\n"," |      - scores (Tensor[N]): the scores or each prediction\n"," |  \n"," |  Args:\n"," |      backbone (nn.Module): the network used to compute the features for the model.\n"," |          It should contain an out_channels attribute, which indicates the number of output\n"," |          channels that each feature map has (and it should be the same for all feature maps).\n"," |          The backbone should return a single Tensor or and OrderedDict[Tensor].\n"," |      num_classes (int): number of output classes of the model (including the background).\n"," |          If box_predictor is specified, num_classes should be None.\n"," |      min_size (int): minimum size of the image to be rescaled before feeding it to the backbone\n"," |      max_size (int): maximum size of the image to be rescaled before feeding it to the backbone\n"," |      image_mean (Tuple[float, float, float]): mean values used for input normalization.\n"," |          They are generally the mean values of the dataset on which the backbone has been trained\n"," |          on\n"," |      image_std (Tuple[float, float, float]): std values used for input normalization.\n"," |          They are generally the std values of the dataset on which the backbone has been trained on\n"," |      rpn_anchor_generator (AnchorGenerator): module that generates the anchors for a set of feature\n"," |          maps.\n"," |      rpn_head (nn.Module): module that computes the objectness and regression deltas from the RPN\n"," |      rpn_pre_nms_top_n_train (int): number of proposals to keep before applying NMS during training\n"," |      rpn_pre_nms_top_n_test (int): number of proposals to keep before applying NMS during testing\n"," |      rpn_post_nms_top_n_train (int): number of proposals to keep after applying NMS during training\n"," |      rpn_post_nms_top_n_test (int): number of proposals to keep after applying NMS during testing\n"," |      rpn_nms_thresh (float): NMS threshold used for postprocessing the RPN proposals\n"," |      rpn_fg_iou_thresh (float): minimum IoU between the anchor and the GT box so that they can be\n"," |          considered as positive during training of the RPN.\n"," |      rpn_bg_iou_thresh (float): maximum IoU between the anchor and the GT box so that they can be\n"," |          considered as negative during training of the RPN.\n"," |      rpn_batch_size_per_image (int): number of anchors that are sampled during training of the RPN\n"," |          for computing the loss\n"," |      rpn_positive_fraction (float): proportion of positive anchors in a mini-batch during training\n"," |          of the RPN\n"," |      rpn_score_thresh (float): during inference, only return proposals with a classification score\n"," |          greater than rpn_score_thresh\n"," |      box_roi_pool (MultiScaleRoIAlign): the module which crops and resizes the feature maps in\n"," |          the locations indicated by the bounding boxes\n"," |      box_head (nn.Module): module that takes the cropped feature maps as input\n"," |      box_predictor (nn.Module): module that takes the output of box_head and returns the\n"," |          classification logits and box regression deltas.\n"," |      box_score_thresh (float): during inference, only return proposals with a classification score\n"," |          greater than box_score_thresh\n"," |      box_nms_thresh (float): NMS threshold for the prediction head. Used during inference\n"," |      box_detections_per_img (int): maximum number of detections per image, for all classes.\n"," |      box_fg_iou_thresh (float): minimum IoU between the proposals and the GT box so that they can be\n"," |          considered as positive during training of the classification head\n"," |      box_bg_iou_thresh (float): maximum IoU between the proposals and the GT box so that they can be\n"," |          considered as negative during training of the classification head\n"," |      box_batch_size_per_image (int): number of proposals that are sampled during training of the\n"," |          classification head\n"," |      box_positive_fraction (float): proportion of positive proposals in a mini-batch during training\n"," |          of the classification head\n"," |      bbox_reg_weights (Tuple[float, float, float, float]): weights for the encoding/decoding of the\n"," |          bounding boxes\n"," |  \n"," |  Example::\n"," |  \n"," |      >>> import torch\n"," |      >>> import torchvision\n"," |      >>> from torchvision.models.detection import FasterRCNN\n"," |      >>> from torchvision.models.detection.rpn import AnchorGenerator\n"," |      >>> # load a pre-trained model for classification and return\n"," |      >>> # only the features\n"," |      >>> backbone = torchvision.models.mobilenet_v2(weights=MobileNet_V2_Weights.DEFAULT).features\n"," |      >>> # FasterRCNN needs to know the number of\n"," |      >>> # output channels in a backbone. For mobilenet_v2, it's 1280,\n"," |      >>> # so we need to add it here\n"," |      >>> backbone.out_channels = 1280\n"," |      >>>\n"," |      >>> # let's make the RPN generate 5 x 3 anchors per spatial\n"," |      >>> # location, with 5 different sizes and 3 different aspect\n"," |      >>> # ratios. We have a Tuple[Tuple[int]] because each feature\n"," |      >>> # map could potentially have different sizes and\n"," |      >>> # aspect ratios\n"," |      >>> anchor_generator = AnchorGenerator(sizes=((32, 64, 128, 256, 512),),\n"," |      >>>                                    aspect_ratios=((0.5, 1.0, 2.0),))\n"," |      >>>\n"," |      >>> # let's define what are the feature maps that we will\n"," |      >>> # use to perform the region of interest cropping, as well as\n"," |      >>> # the size of the crop after rescaling.\n"," |      >>> # if your backbone returns a Tensor, featmap_names is expected to\n"," |      >>> # be ['0']. More generally, the backbone should return an\n"," |      >>> # OrderedDict[Tensor], and in featmap_names you can choose which\n"," |      >>> # feature maps to use.\n"," |      >>> roi_pooler = torchvision.ops.MultiScaleRoIAlign(featmap_names=['0'],\n"," |      >>>                                                 output_size=7,\n"," |      >>>                                                 sampling_ratio=2)\n"," |      >>>\n"," |      >>> # put the pieces together inside a FasterRCNN model\n"," |      >>> model = FasterRCNN(backbone,\n"," |      >>>                    num_classes=2,\n"," |      >>>                    rpn_anchor_generator=anchor_generator,\n"," |      >>>                    box_roi_pool=roi_pooler)\n"," |      >>> model.eval()\n"," |      >>> x = [torch.rand(3, 300, 400), torch.rand(3, 500, 400)]\n"," |      >>> predictions = model(x)\n"," |  \n"," |  Method resolution order:\n"," |      FasterRCNN\n"," |      torchvision.models.detection.generalized_rcnn.GeneralizedRCNN\n"," |      torch.nn.modules.module.Module\n"," |      builtins.object\n"," |  \n"," |  Methods defined here:\n"," |  \n"," |  __init__(self, backbone, num_classes=None, min_size=800, max_size=1333, image_mean=None, image_std=None, rpn_anchor_generator=None, rpn_head=None, rpn_pre_nms_top_n_train=2000, rpn_pre_nms_top_n_test=1000, rpn_post_nms_top_n_train=2000, rpn_post_nms_top_n_test=1000, rpn_nms_thresh=0.7, rpn_fg_iou_thresh=0.7, rpn_bg_iou_thresh=0.3, rpn_batch_size_per_image=256, rpn_positive_fraction=0.5, rpn_score_thresh=0.0, box_roi_pool=None, box_head=None, box_predictor=None, box_score_thresh=0.05, box_nms_thresh=0.5, box_detections_per_img=100, box_fg_iou_thresh=0.5, box_bg_iou_thresh=0.5, box_batch_size_per_image=512, box_positive_fraction=0.25, bbox_reg_weights=None, **kwargs)\n"," |      Initializes internal Module state, shared by both nn.Module and ScriptModule.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data and other attributes defined here:\n"," |  \n"," |  __annotations__ = {}\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from torchvision.models.detection.generalized_rcnn.GeneralizedRCNN:\n"," |  \n"," |  eager_outputs(self, losses, detections)\n"," |  \n"," |  forward(self, images, targets=None)\n"," |      Args:\n"," |          images (list[Tensor]): images to be processed\n"," |          targets (list[Dict[str, Tensor]]): ground-truth boxes present in the image (optional)\n"," |      \n"," |      Returns:\n"," |          result (list[BoxList] or dict[Tensor]): the output from the model.\n"," |              During training, it returns a dict[Tensor] which contains the losses.\n"," |              During testing, it returns list[BoxList] contains additional fields\n"," |              like `scores`, `labels` and `mask` (for Mask R-CNN models).\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from torch.nn.modules.module.Module:\n"," |  \n"," |  __call__ = _call_impl(self, *args, **kwargs)\n"," |  \n"," |  __delattr__(self, name)\n"," |      Implement delattr(self, name).\n"," |  \n"," |  __dir__(self)\n"," |      Default dir() implementation.\n"," |  \n"," |  __getattr__(self, name: str) -> Union[torch.Tensor, ForwardRef('Module')]\n"," |  \n"," |  __repr__(self)\n"," |      Return repr(self).\n"," |  \n"," |  __setattr__(self, name: str, value: Union[torch.Tensor, ForwardRef('Module')]) -> None\n"," |      Implement setattr(self, name, value).\n"," |  \n"," |  __setstate__(self, state)\n"," |  \n"," |  add_module(self, name: str, module: Optional[ForwardRef('Module')]) -> None\n"," |      Adds a child module to the current module.\n"," |      \n"," |      The module can be accessed as an attribute using the given name.\n"," |      \n"," |      Args:\n"," |          name (str): name of the child module. The child module can be\n"," |              accessed from this module using the given name\n"," |          module (Module): child module to be added to the module.\n"," |  \n"," |  apply(self: ~T, fn: Callable[[ForwardRef('Module')], NoneType]) -> ~T\n"," |      Applies ``fn`` recursively to every submodule (as returned by ``.children()``)\n"," |      as well as self. Typical use includes initializing the parameters of a model\n"," |      (see also :ref:`nn-init-doc`).\n"," |      \n"," |      Args:\n"," |          fn (:class:`Module` -> None): function to be applied to each submodule\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |      \n"," |      Example::\n"," |      \n"," |          >>> @torch.no_grad()\n"," |          >>> def init_weights(m):\n"," |          >>>     print(m)\n"," |          >>>     if type(m) == nn.Linear:\n"," |          >>>         m.weight.fill_(1.0)\n"," |          >>>         print(m.weight)\n"," |          >>> net = nn.Sequential(nn.Linear(2, 2), nn.Linear(2, 2))\n"," |          >>> net.apply(init_weights)\n"," |          Linear(in_features=2, out_features=2, bias=True)\n"," |          Parameter containing:\n"," |          tensor([[1., 1.],\n"," |                  [1., 1.]], requires_grad=True)\n"," |          Linear(in_features=2, out_features=2, bias=True)\n"," |          Parameter containing:\n"," |          tensor([[1., 1.],\n"," |                  [1., 1.]], requires_grad=True)\n"," |          Sequential(\n"," |            (0): Linear(in_features=2, out_features=2, bias=True)\n"," |            (1): Linear(in_features=2, out_features=2, bias=True)\n"," |          )\n"," |  \n"," |  bfloat16(self: ~T) -> ~T\n"," |      Casts all floating point parameters and buffers to ``bfloat16`` datatype.\n"," |      \n"," |      .. note::\n"," |          This method modifies the module in-place.\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |  \n"," |  buffers(self, recurse: bool = True) -> Iterator[torch.Tensor]\n"," |      Returns an iterator over module buffers.\n"," |      \n"," |      Args:\n"," |          recurse (bool): if True, then yields buffers of this module\n"," |              and all submodules. Otherwise, yields only buffers that\n"," |              are direct members of this module.\n"," |      \n"," |      Yields:\n"," |          torch.Tensor: module buffer\n"," |      \n"," |      Example::\n"," |      \n"," |          >>> # xdoctest: +SKIP(\"undefined vars\")\n"," |          >>> for buf in model.buffers():\n"," |          >>>     print(type(buf), buf.size())\n"," |          <class 'torch.Tensor'> (20L,)\n"," |          <class 'torch.Tensor'> (20L, 1L, 5L, 5L)\n"," |  \n"," |  children(self) -> Iterator[ForwardRef('Module')]\n"," |      Returns an iterator over immediate children modules.\n"," |      \n"," |      Yields:\n"," |          Module: a child module\n"," |  \n"," |  cpu(self: ~T) -> ~T\n"," |      Moves all model parameters and buffers to the CPU.\n"," |      \n"," |      .. note::\n"," |          This method modifies the module in-place.\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |  \n"," |  cuda(self: ~T, device: Union[int, torch.device, NoneType] = None) -> ~T\n"," |      Moves all model parameters and buffers to the GPU.\n"," |      \n"," |      This also makes associated parameters and buffers different objects. So\n"," |      it should be called before constructing optimizer if the module will\n"," |      live on GPU while being optimized.\n"," |      \n"," |      .. note::\n"," |          This method modifies the module in-place.\n"," |      \n"," |      Args:\n"," |          device (int, optional): if specified, all parameters will be\n"," |              copied to that device\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |  \n"," |  double(self: ~T) -> ~T\n"," |      Casts all floating point parameters and buffers to ``double`` datatype.\n"," |      \n"," |      .. note::\n"," |          This method modifies the module in-place.\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |  \n"," |  eval(self: ~T) -> ~T\n"," |      Sets the module in evaluation mode.\n"," |      \n"," |      This has any effect only on certain modules. See documentations of\n"," |      particular modules for details of their behaviors in training/evaluation\n"," |      mode, if they are affected, e.g. :class:`Dropout`, :class:`BatchNorm`,\n"," |      etc.\n"," |      \n"," |      This is equivalent with :meth:`self.train(False) <torch.nn.Module.train>`.\n"," |      \n"," |      See :ref:`locally-disable-grad-doc` for a comparison between\n"," |      `.eval()` and several similar mechanisms that may be confused with it.\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |  \n"," |  extra_repr(self) -> str\n"," |      Set the extra representation of the module\n"," |      \n"," |      To print customized extra information, you should re-implement\n"," |      this method in your own modules. Both single-line and multi-line\n"," |      strings are acceptable.\n"," |  \n"," |  float(self: ~T) -> ~T\n"," |      Casts all floating point parameters and buffers to ``float`` datatype.\n"," |      \n"," |      .. note::\n"," |          This method modifies the module in-place.\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |  \n"," |  get_buffer(self, target: str) -> 'Tensor'\n"," |      Returns the buffer given by ``target`` if it exists,\n"," |      otherwise throws an error.\n"," |      \n"," |      See the docstring for ``get_submodule`` for a more detailed\n"," |      explanation of this method's functionality as well as how to\n"," |      correctly specify ``target``.\n"," |      \n"," |      Args:\n"," |          target: The fully-qualified string name of the buffer\n"," |              to look for. (See ``get_submodule`` for how to specify a\n"," |              fully-qualified string.)\n"," |      \n"," |      Returns:\n"," |          torch.Tensor: The buffer referenced by ``target``\n"," |      \n"," |      Raises:\n"," |          AttributeError: If the target string references an invalid\n"," |              path or resolves to something that is not a\n"," |              buffer\n"," |  \n"," |  get_extra_state(self) -> Any\n"," |      Returns any extra state to include in the module's state_dict.\n"," |      Implement this and a corresponding :func:`set_extra_state` for your module\n"," |      if you need to store extra state. This function is called when building the\n"," |      module's `state_dict()`.\n"," |      \n"," |      Note that extra state should be picklable to ensure working serialization\n"," |      of the state_dict. We only provide provide backwards compatibility guarantees\n"," |      for serializing Tensors; other objects may break backwards compatibility if\n"," |      their serialized pickled form changes.\n"," |      \n"," |      Returns:\n"," |          object: Any extra state to store in the module's state_dict\n"," |  \n"," |  get_parameter(self, target: str) -> 'Parameter'\n"," |      Returns the parameter given by ``target`` if it exists,\n"," |      otherwise throws an error.\n"," |      \n"," |      See the docstring for ``get_submodule`` for a more detailed\n"," |      explanation of this method's functionality as well as how to\n"," |      correctly specify ``target``.\n"," |      \n"," |      Args:\n"," |          target: The fully-qualified string name of the Parameter\n"," |              to look for. (See ``get_submodule`` for how to specify a\n"," |              fully-qualified string.)\n"," |      \n"," |      Returns:\n"," |          torch.nn.Parameter: The Parameter referenced by ``target``\n"," |      \n"," |      Raises:\n"," |          AttributeError: If the target string references an invalid\n"," |              path or resolves to something that is not an\n"," |              ``nn.Parameter``\n"," |  \n"," |  get_submodule(self, target: str) -> 'Module'\n"," |      Returns the submodule given by ``target`` if it exists,\n"," |      otherwise throws an error.\n"," |      \n"," |      For example, let's say you have an ``nn.Module`` ``A`` that\n"," |      looks like this:\n"," |      \n"," |      .. code-block:: text\n"," |      \n"," |          A(\n"," |              (net_b): Module(\n"," |                  (net_c): Module(\n"," |                      (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2))\n"," |                  )\n"," |                  (linear): Linear(in_features=100, out_features=200, bias=True)\n"," |              )\n"," |          )\n"," |      \n"," |      (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested\n"," |      submodule ``net_b``, which itself has two submodules ``net_c``\n"," |      and ``linear``. ``net_c`` then has a submodule ``conv``.)\n"," |      \n"," |      To check whether or not we have the ``linear`` submodule, we\n"," |      would call ``get_submodule(\"net_b.linear\")``. To check whether\n"," |      we have the ``conv`` submodule, we would call\n"," |      ``get_submodule(\"net_b.net_c.conv\")``.\n"," |      \n"," |      The runtime of ``get_submodule`` is bounded by the degree\n"," |      of module nesting in ``target``. A query against\n"," |      ``named_modules`` achieves the same result, but it is O(N) in\n"," |      the number of transitive modules. So, for a simple check to see\n"," |      if some submodule exists, ``get_submodule`` should always be\n"," |      used.\n"," |      \n"," |      Args:\n"," |          target: The fully-qualified string name of the submodule\n"," |              to look for. (See above example for how to specify a\n"," |              fully-qualified string.)\n"," |      \n"," |      Returns:\n"," |          torch.nn.Module: The submodule referenced by ``target``\n"," |      \n"," |      Raises:\n"," |          AttributeError: If the target string references an invalid\n"," |              path or resolves to something that is not an\n"," |              ``nn.Module``\n"," |  \n"," |  half(self: ~T) -> ~T\n"," |      Casts all floating point parameters and buffers to ``half`` datatype.\n"," |      \n"," |      .. note::\n"," |          This method modifies the module in-place.\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |  \n"," |  ipu(self: ~T, device: Union[int, torch.device, NoneType] = None) -> ~T\n"," |      Moves all model parameters and buffers to the IPU.\n"," |      \n"," |      This also makes associated parameters and buffers different objects. So\n"," |      it should be called before constructing optimizer if the module will\n"," |      live on IPU while being optimized.\n"," |      \n"," |      .. note::\n"," |          This method modifies the module in-place.\n"," |      \n"," |      Arguments:\n"," |          device (int, optional): if specified, all parameters will be\n"," |              copied to that device\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |  \n"," |  load_state_dict(self, state_dict: Mapping[str, Any], strict: bool = True)\n"," |      Copies parameters and buffers from :attr:`state_dict` into\n"," |      this module and its descendants. If :attr:`strict` is ``True``, then\n"," |      the keys of :attr:`state_dict` must exactly match the keys returned\n"," |      by this module's :meth:`~torch.nn.Module.state_dict` function.\n"," |      \n"," |      Args:\n"," |          state_dict (dict): a dict containing parameters and\n"," |              persistent buffers.\n"," |          strict (bool, optional): whether to strictly enforce that the keys\n"," |              in :attr:`state_dict` match the keys returned by this module's\n"," |              :meth:`~torch.nn.Module.state_dict` function. Default: ``True``\n"," |      \n"," |      Returns:\n"," |          ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:\n"," |              * **missing_keys** is a list of str containing the missing keys\n"," |              * **unexpected_keys** is a list of str containing the unexpected keys\n"," |      \n"," |      Note:\n"," |          If a parameter or buffer is registered as ``None`` and its corresponding key\n"," |          exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a\n"," |          ``RuntimeError``.\n"," |  \n"," |  modules(self) -> Iterator[ForwardRef('Module')]\n"," |      Returns an iterator over all modules in the network.\n"," |      \n"," |      Yields:\n"," |          Module: a module in the network\n"," |      \n"," |      Note:\n"," |          Duplicate modules are returned only once. In the following\n"," |          example, ``l`` will be returned only once.\n"," |      \n"," |      Example::\n"," |      \n"," |          >>> l = nn.Linear(2, 2)\n"," |          >>> net = nn.Sequential(l, l)\n"," |          >>> for idx, m in enumerate(net.modules()):\n"," |          ...     print(idx, '->', m)\n"," |      \n"," |          0 -> Sequential(\n"," |            (0): Linear(in_features=2, out_features=2, bias=True)\n"," |            (1): Linear(in_features=2, out_features=2, bias=True)\n"," |          )\n"," |          1 -> Linear(in_features=2, out_features=2, bias=True)\n"," |  \n"," |  named_buffers(self, prefix: str = '', recurse: bool = True, remove_duplicate: bool = True) -> Iterator[Tuple[str, torch.Tensor]]\n"," |      Returns an iterator over module buffers, yielding both the\n"," |      name of the buffer as well as the buffer itself.\n"," |      \n"," |      Args:\n"," |          prefix (str): prefix to prepend to all buffer names.\n"," |          recurse (bool, optional): if True, then yields buffers of this module\n"," |              and all submodules. Otherwise, yields only buffers that\n"," |              are direct members of this module. Defaults to True.\n"," |          remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.\n"," |      \n"," |      Yields:\n"," |          (str, torch.Tensor): Tuple containing the name and buffer\n"," |      \n"," |      Example::\n"," |      \n"," |          >>> # xdoctest: +SKIP(\"undefined vars\")\n"," |          >>> for name, buf in self.named_buffers():\n"," |          >>>     if name in ['running_var']:\n"," |          >>>         print(buf.size())\n"," |  \n"," |  named_children(self) -> Iterator[Tuple[str, ForwardRef('Module')]]\n"," |      Returns an iterator over immediate children modules, yielding both\n"," |      the name of the module as well as the module itself.\n"," |      \n"," |      Yields:\n"," |          (str, Module): Tuple containing a name and child module\n"," |      \n"," |      Example::\n"," |      \n"," |          >>> # xdoctest: +SKIP(\"undefined vars\")\n"," |          >>> for name, module in model.named_children():\n"," |          >>>     if name in ['conv4', 'conv5']:\n"," |          >>>         print(module)\n"," |  \n"," |  named_modules(self, memo: Optional[Set[ForwardRef('Module')]] = None, prefix: str = '', remove_duplicate: bool = True)\n"," |      Returns an iterator over all modules in the network, yielding\n"," |      both the name of the module as well as the module itself.\n"," |      \n"," |      Args:\n"," |          memo: a memo to store the set of modules already added to the result\n"," |          prefix: a prefix that will be added to the name of the module\n"," |          remove_duplicate: whether to remove the duplicated module instances in the result\n"," |              or not\n"," |      \n"," |      Yields:\n"," |          (str, Module): Tuple of name and module\n"," |      \n"," |      Note:\n"," |          Duplicate modules are returned only once. In the following\n"," |          example, ``l`` will be returned only once.\n"," |      \n"," |      Example::\n"," |      \n"," |          >>> l = nn.Linear(2, 2)\n"," |          >>> net = nn.Sequential(l, l)\n"," |          >>> for idx, m in enumerate(net.named_modules()):\n"," |          ...     print(idx, '->', m)\n"," |      \n"," |          0 -> ('', Sequential(\n"," |            (0): Linear(in_features=2, out_features=2, bias=True)\n"," |            (1): Linear(in_features=2, out_features=2, bias=True)\n"," |          ))\n"," |          1 -> ('0', Linear(in_features=2, out_features=2, bias=True))\n"," |  \n"," |  named_parameters(self, prefix: str = '', recurse: bool = True, remove_duplicate: bool = True) -> Iterator[Tuple[str, torch.nn.parameter.Parameter]]\n"," |      Returns an iterator over module parameters, yielding both the\n"," |      name of the parameter as well as the parameter itself.\n"," |      \n"," |      Args:\n"," |          prefix (str): prefix to prepend to all parameter names.\n"," |          recurse (bool): if True, then yields parameters of this module\n"," |              and all submodules. Otherwise, yields only parameters that\n"," |              are direct members of this module.\n"," |          remove_duplicate (bool, optional): whether to remove the duplicated\n"," |              parameters in the result. Defaults to True.\n"," |      \n"," |      Yields:\n"," |          (str, Parameter): Tuple containing the name and parameter\n"," |      \n"," |      Example::\n"," |      \n"," |          >>> # xdoctest: +SKIP(\"undefined vars\")\n"," |          >>> for name, param in self.named_parameters():\n"," |          >>>     if name in ['bias']:\n"," |          >>>         print(param.size())\n"," |  \n"," |  parameters(self, recurse: bool = True) -> Iterator[torch.nn.parameter.Parameter]\n"," |      Returns an iterator over module parameters.\n"," |      \n"," |      This is typically passed to an optimizer.\n"," |      \n"," |      Args:\n"," |          recurse (bool): if True, then yields parameters of this module\n"," |              and all submodules. Otherwise, yields only parameters that\n"," |              are direct members of this module.\n"," |      \n"," |      Yields:\n"," |          Parameter: module parameter\n"," |      \n"," |      Example::\n"," |      \n"," |          >>> # xdoctest: +SKIP(\"undefined vars\")\n"," |          >>> for param in model.parameters():\n"," |          >>>     print(type(param), param.size())\n"," |          <class 'torch.Tensor'> (20L,)\n"," |          <class 'torch.Tensor'> (20L, 1L, 5L, 5L)\n"," |  \n"," |  register_backward_hook(self, hook: Callable[[ForwardRef('Module'), Union[Tuple[torch.Tensor, ...], torch.Tensor], Union[Tuple[torch.Tensor, ...], torch.Tensor]], Union[NoneType, Tuple[torch.Tensor, ...], torch.Tensor]]) -> torch.utils.hooks.RemovableHandle\n"," |      Registers a backward hook on the module.\n"," |      \n"," |      This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and\n"," |      the behavior of this function will change in future versions.\n"," |      \n"," |      Returns:\n"," |          :class:`torch.utils.hooks.RemovableHandle`:\n"," |              a handle that can be used to remove the added hook by calling\n"," |              ``handle.remove()``\n"," |  \n"," |  register_buffer(self, name: str, tensor: Optional[torch.Tensor], persistent: bool = True) -> None\n"," |      Adds a buffer to the module.\n"," |      \n"," |      This is typically used to register a buffer that should not to be\n"," |      considered a model parameter. For example, BatchNorm's ``running_mean``\n"," |      is not a parameter, but is part of the module's state. Buffers, by\n"," |      default, are persistent and will be saved alongside parameters. This\n"," |      behavior can be changed by setting :attr:`persistent` to ``False``. The\n"," |      only difference between a persistent buffer and a non-persistent buffer\n"," |      is that the latter will not be a part of this module's\n"," |      :attr:`state_dict`.\n"," |      \n"," |      Buffers can be accessed as attributes using given names.\n"," |      \n"," |      Args:\n"," |          name (str): name of the buffer. The buffer can be accessed\n"," |              from this module using the given name\n"," |          tensor (Tensor or None): buffer to be registered. If ``None``, then operations\n"," |              that run on buffers, such as :attr:`cuda`, are ignored. If ``None``,\n"," |              the buffer is **not** included in the module's :attr:`state_dict`.\n"," |          persistent (bool): whether the buffer is part of this module's\n"," |              :attr:`state_dict`.\n"," |      \n"," |      Example::\n"," |      \n"," |          >>> # xdoctest: +SKIP(\"undefined vars\")\n"," |          >>> self.register_buffer('running_mean', torch.zeros(num_features))\n"," |  \n"," |  register_forward_hook(self, hook: Union[Callable[[~T, Tuple[Any, ...], Any], Optional[Any]], Callable[[~T, Tuple[Any, ...], Dict[str, Any], Any], Optional[Any]]], *, prepend: bool = False, with_kwargs: bool = False) -> torch.utils.hooks.RemovableHandle\n"," |      Registers a forward hook on the module.\n"," |      \n"," |      The hook will be called every time after :func:`forward` has computed an output.\n"," |      \n"," |      If ``with_kwargs`` is ``False`` or not specified, the input contains only\n"," |      the positional arguments given to the module. Keyword arguments won't be\n"," |      passed to the hooks and only to the ``forward``. The hook can modify the\n"," |      output. It can modify the input inplace but it will not have effect on\n"," |      forward since this is called after :func:`forward` is called. The hook\n"," |      should have the following signature::\n"," |      \n"," |          hook(module, args, output) -> None or modified output\n"," |      \n"," |      If ``with_kwargs`` is ``True``, the forward hook will be passed the\n"," |      ``kwargs`` given to the forward function and be expected to return the\n"," |      output possibly modified. The hook should have the following signature::\n"," |      \n"," |          hook(module, args, kwargs, output) -> None or modified output\n"," |      \n"," |      Args:\n"," |          hook (Callable): The user defined hook to be registered.\n"," |          prepend (bool): If ``True``, the provided ``hook`` will be fired\n"," |              before all existing ``forward`` hooks on this\n"," |              :class:`torch.nn.modules.Module`. Otherwise, the provided\n"," |              ``hook`` will be fired after all existing ``forward`` hooks on\n"," |              this :class:`torch.nn.modules.Module`. Note that global\n"," |              ``forward`` hooks registered with\n"," |              :func:`register_module_forward_hook` will fire before all hooks\n"," |              registered by this method.\n"," |              Default: ``False``\n"," |          with_kwargs (bool): If ``True``, the ``hook`` will be passed the\n"," |              kwargs given to the forward function.\n"," |              Default: ``False``\n"," |      \n"," |      Returns:\n"," |          :class:`torch.utils.hooks.RemovableHandle`:\n"," |              a handle that can be used to remove the added hook by calling\n"," |              ``handle.remove()``\n"," |  \n"," |  register_forward_pre_hook(self, hook: Union[Callable[[~T, Tuple[Any, ...]], Optional[Any]], Callable[[~T, Tuple[Any, ...], Dict[str, Any]], Optional[Tuple[Any, Dict[str, Any]]]]], *, prepend: bool = False, with_kwargs: bool = False) -> torch.utils.hooks.RemovableHandle\n"," |      Registers a forward pre-hook on the module.\n"," |      \n"," |      The hook will be called every time before :func:`forward` is invoked.\n"," |      \n"," |      \n"," |      If ``with_kwargs`` is false or not specified, the input contains only\n"," |      the positional arguments given to the module. Keyword arguments won't be\n"," |      passed to the hooks and only to the ``forward``. The hook can modify the\n"," |      input. User can either return a tuple or a single modified value in the\n"," |      hook. We will wrap the value into a tuple if a single value is returned\n"," |      (unless that value is already a tuple). The hook should have the\n"," |      following signature::\n"," |      \n"," |          hook(module, args) -> None or modified input\n"," |      \n"," |      If ``with_kwargs`` is true, the forward pre-hook will be passed the\n"," |      kwargs given to the forward function. And if the hook modifies the\n"," |      input, both the args and kwargs should be returned. The hook should have\n"," |      the following signature::\n"," |      \n"," |          hook(module, args, kwargs) -> None or a tuple of modified input and kwargs\n"," |      \n"," |      Args:\n"," |          hook (Callable): The user defined hook to be registered.\n"," |          prepend (bool): If true, the provided ``hook`` will be fired before\n"," |              all existing ``forward_pre`` hooks on this\n"," |              :class:`torch.nn.modules.Module`. Otherwise, the provided\n"," |              ``hook`` will be fired after all existing ``forward_pre`` hooks\n"," |              on this :class:`torch.nn.modules.Module`. Note that global\n"," |              ``forward_pre`` hooks registered with\n"," |              :func:`register_module_forward_pre_hook` will fire before all\n"," |              hooks registered by this method.\n"," |              Default: ``False``\n"," |          with_kwargs (bool): If true, the ``hook`` will be passed the kwargs\n"," |              given to the forward function.\n"," |              Default: ``False``\n"," |      \n"," |      Returns:\n"," |          :class:`torch.utils.hooks.RemovableHandle`:\n"," |              a handle that can be used to remove the added hook by calling\n"," |              ``handle.remove()``\n"," |  \n"," |  register_full_backward_hook(self, hook: Callable[[ForwardRef('Module'), Union[Tuple[torch.Tensor, ...], torch.Tensor], Union[Tuple[torch.Tensor, ...], torch.Tensor]], Union[NoneType, Tuple[torch.Tensor, ...], torch.Tensor]], prepend: bool = False) -> torch.utils.hooks.RemovableHandle\n"," |      Registers a backward hook on the module.\n"," |      \n"," |      The hook will be called every time the gradients with respect to a module\n"," |      are computed, i.e. the hook will execute if and only if the gradients with\n"," |      respect to module outputs are computed. The hook should have the following\n"," |      signature::\n"," |      \n"," |          hook(module, grad_input, grad_output) -> tuple(Tensor) or None\n"," |      \n"," |      The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients\n"," |      with respect to the inputs and outputs respectively. The hook should\n"," |      not modify its arguments, but it can optionally return a new gradient with\n"," |      respect to the input that will be used in place of :attr:`grad_input` in\n"," |      subsequent computations. :attr:`grad_input` will only correspond to the inputs given\n"," |      as positional arguments and all kwarg arguments are ignored. Entries\n"," |      in :attr:`grad_input` and :attr:`grad_output` will be ``None`` for all non-Tensor\n"," |      arguments.\n"," |      \n"," |      For technical reasons, when this hook is applied to a Module, its forward function will\n"," |      receive a view of each Tensor passed to the Module. Similarly the caller will receive a view\n"," |      of each Tensor returned by the Module's forward function.\n"," |      \n"," |      .. warning ::\n"," |          Modifying inputs or outputs inplace is not allowed when using backward hooks and\n"," |          will raise an error.\n"," |      \n"," |      Args:\n"," |          hook (Callable): The user-defined hook to be registered.\n"," |          prepend (bool): If true, the provided ``hook`` will be fired before\n"," |              all existing ``backward`` hooks on this\n"," |              :class:`torch.nn.modules.Module`. Otherwise, the provided\n"," |              ``hook`` will be fired after all existing ``backward`` hooks on\n"," |              this :class:`torch.nn.modules.Module`. Note that global\n"," |              ``backward`` hooks registered with\n"," |              :func:`register_module_full_backward_hook` will fire before\n"," |              all hooks registered by this method.\n"," |      \n"," |      Returns:\n"," |          :class:`torch.utils.hooks.RemovableHandle`:\n"," |              a handle that can be used to remove the added hook by calling\n"," |              ``handle.remove()``\n"," |  \n"," |  register_full_backward_pre_hook(self, hook: Callable[[ForwardRef('Module'), Union[Tuple[torch.Tensor, ...], torch.Tensor]], Union[NoneType, Tuple[torch.Tensor, ...], torch.Tensor]], prepend: bool = False) -> torch.utils.hooks.RemovableHandle\n"," |      Registers a backward pre-hook on the module.\n"," |      \n"," |      The hook will be called every time the gradients for the module are computed.\n"," |      The hook should have the following signature::\n"," |      \n"," |          hook(module, grad_output) -> Tensor or None\n"," |      \n"," |      The :attr:`grad_output` is a tuple. The hook should\n"," |      not modify its arguments, but it can optionally return a new gradient with\n"," |      respect to the output that will be used in place of :attr:`grad_output` in\n"," |      subsequent computations. Entries in :attr:`grad_output` will be ``None`` for\n"," |      all non-Tensor arguments.\n"," |      \n"," |      For technical reasons, when this hook is applied to a Module, its forward function will\n"," |      receive a view of each Tensor passed to the Module. Similarly the caller will receive a view\n"," |      of each Tensor returned by the Module's forward function.\n"," |      \n"," |      .. warning ::\n"," |          Modifying inputs inplace is not allowed when using backward hooks and\n"," |          will raise an error.\n"," |      \n"," |      Args:\n"," |          hook (Callable): The user-defined hook to be registered.\n"," |          prepend (bool): If true, the provided ``hook`` will be fired before\n"," |              all existing ``backward_pre`` hooks on this\n"," |              :class:`torch.nn.modules.Module`. Otherwise, the provided\n"," |              ``hook`` will be fired after all existing ``backward_pre`` hooks\n"," |              on this :class:`torch.nn.modules.Module`. Note that global\n"," |              ``backward_pre`` hooks registered with\n"," |              :func:`register_module_full_backward_pre_hook` will fire before\n"," |              all hooks registered by this method.\n"," |      \n"," |      Returns:\n"," |          :class:`torch.utils.hooks.RemovableHandle`:\n"," |              a handle that can be used to remove the added hook by calling\n"," |              ``handle.remove()``\n"," |  \n"," |  register_load_state_dict_post_hook(self, hook)\n"," |      Registers a post hook to be run after module's ``load_state_dict``\n"," |      is called.\n"," |      \n"," |      It should have the following signature::\n"," |          hook(module, incompatible_keys) -> None\n"," |      \n"," |      The ``module`` argument is the current module that this hook is registered\n"," |      on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting\n"," |      of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys``\n"," |      is a ``list`` of ``str`` containing the missing keys and\n"," |      ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys.\n"," |      \n"," |      The given incompatible_keys can be modified inplace if needed.\n"," |      \n"," |      Note that the checks performed when calling :func:`load_state_dict` with\n"," |      ``strict=True`` are affected by modifications the hook makes to\n"," |      ``missing_keys`` or ``unexpected_keys``, as expected. Additions to either\n"," |      set of keys will result in an error being thrown when ``strict=True``, and\n"," |      clearing out both missing and unexpected keys will avoid an error.\n"," |      \n"," |      Returns:\n"," |          :class:`torch.utils.hooks.RemovableHandle`:\n"," |              a handle that can be used to remove the added hook by calling\n"," |              ``handle.remove()``\n"," |  \n"," |  register_module(self, name: str, module: Optional[ForwardRef('Module')]) -> None\n"," |      Alias for :func:`add_module`.\n"," |  \n"," |  register_parameter(self, name: str, param: Optional[torch.nn.parameter.Parameter]) -> None\n"," |      Adds a parameter to the module.\n"," |      \n"," |      The parameter can be accessed as an attribute using given name.\n"," |      \n"," |      Args:\n"," |          name (str): name of the parameter. The parameter can be accessed\n"," |              from this module using the given name\n"," |          param (Parameter or None): parameter to be added to the module. If\n"," |              ``None``, then operations that run on parameters, such as :attr:`cuda`,\n"," |              are ignored. If ``None``, the parameter is **not** included in the\n"," |              module's :attr:`state_dict`.\n"," |  \n"," |  register_state_dict_pre_hook(self, hook)\n"," |      These hooks will be called with arguments: ``self``, ``prefix``,\n"," |      and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered\n"," |      hooks can be used to perform pre-processing before the ``state_dict``\n"," |      call is made.\n"," |  \n"," |  requires_grad_(self: ~T, requires_grad: bool = True) -> ~T\n"," |      Change if autograd should record operations on parameters in this\n"," |      module.\n"," |      \n"," |      This method sets the parameters' :attr:`requires_grad` attributes\n"," |      in-place.\n"," |      \n"," |      This method is helpful for freezing part of the module for finetuning\n"," |      or training parts of a model individually (e.g., GAN training).\n"," |      \n"," |      See :ref:`locally-disable-grad-doc` for a comparison between\n"," |      `.requires_grad_()` and several similar mechanisms that may be confused with it.\n"," |      \n"," |      Args:\n"," |          requires_grad (bool): whether autograd should record operations on\n"," |                                parameters in this module. Default: ``True``.\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |  \n"," |  set_extra_state(self, state: Any)\n"," |      This function is called from :func:`load_state_dict` to handle any extra state\n"," |      found within the `state_dict`. Implement this function and a corresponding\n"," |      :func:`get_extra_state` for your module if you need to store extra state within its\n"," |      `state_dict`.\n"," |      \n"," |      Args:\n"," |          state (dict): Extra state from the `state_dict`\n"," |  \n"," |  share_memory(self: ~T) -> ~T\n"," |      See :meth:`torch.Tensor.share_memory_`\n"," |  \n"," |  state_dict(self, *args, destination=None, prefix='', keep_vars=False)\n"," |      Returns a dictionary containing references to the whole state of the module.\n"," |      \n"," |      Both parameters and persistent buffers (e.g. running averages) are\n"," |      included. Keys are corresponding parameter and buffer names.\n"," |      Parameters and buffers set to ``None`` are not included.\n"," |      \n"," |      .. note::\n"," |          The returned object is a shallow copy. It contains references\n"," |          to the module's parameters and buffers.\n"," |      \n"," |      .. warning::\n"," |          Currently ``state_dict()`` also accepts positional arguments for\n"," |          ``destination``, ``prefix`` and ``keep_vars`` in order. However,\n"," |          this is being deprecated and keyword arguments will be enforced in\n"," |          future releases.\n"," |      \n"," |      .. warning::\n"," |          Please avoid the use of argument ``destination`` as it is not\n"," |          designed for end-users.\n"," |      \n"," |      Args:\n"," |          destination (dict, optional): If provided, the state of module will\n"," |              be updated into the dict and the same object is returned.\n"," |              Otherwise, an ``OrderedDict`` will be created and returned.\n"," |              Default: ``None``.\n"," |          prefix (str, optional): a prefix added to parameter and buffer\n"," |              names to compose the keys in state_dict. Default: ``''``.\n"," |          keep_vars (bool, optional): by default the :class:`~torch.Tensor` s\n"," |              returned in the state dict are detached from autograd. If it's\n"," |              set to ``True``, detaching will not be performed.\n"," |              Default: ``False``.\n"," |      \n"," |      Returns:\n"," |          dict:\n"," |              a dictionary containing a whole state of the module\n"," |      \n"," |      Example::\n"," |      \n"," |          >>> # xdoctest: +SKIP(\"undefined vars\")\n"," |          >>> module.state_dict().keys()\n"," |          ['bias', 'weight']\n"," |  \n"," |  to(self, *args, **kwargs)\n"," |      Moves and/or casts the parameters and buffers.\n"," |      \n"," |      This can be called as\n"," |      \n"," |      .. function:: to(device=None, dtype=None, non_blocking=False)\n"," |         :noindex:\n"," |      \n"," |      .. function:: to(dtype, non_blocking=False)\n"," |         :noindex:\n"," |      \n"," |      .. function:: to(tensor, non_blocking=False)\n"," |         :noindex:\n"," |      \n"," |      .. function:: to(memory_format=torch.channels_last)\n"," |         :noindex:\n"," |      \n"," |      Its signature is similar to :meth:`torch.Tensor.to`, but only accepts\n"," |      floating point or complex :attr:`dtype`\\ s. In addition, this method will\n"," |      only cast the floating point or complex parameters and buffers to :attr:`dtype`\n"," |      (if given). The integral parameters and buffers will be moved\n"," |      :attr:`device`, if that is given, but with dtypes unchanged. When\n"," |      :attr:`non_blocking` is set, it tries to convert/move asynchronously\n"," |      with respect to the host if possible, e.g., moving CPU Tensors with\n"," |      pinned memory to CUDA devices.\n"," |      \n"," |      See below for examples.\n"," |      \n"," |      .. note::\n"," |          This method modifies the module in-place.\n"," |      \n"," |      Args:\n"," |          device (:class:`torch.device`): the desired device of the parameters\n"," |              and buffers in this module\n"," |          dtype (:class:`torch.dtype`): the desired floating point or complex dtype of\n"," |              the parameters and buffers in this module\n"," |          tensor (torch.Tensor): Tensor whose dtype and device are the desired\n"," |              dtype and device for all parameters and buffers in this module\n"," |          memory_format (:class:`torch.memory_format`): the desired memory\n"," |              format for 4D parameters and buffers in this module (keyword\n"," |              only argument)\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |      \n"," |      Examples::\n"," |      \n"," |          >>> # xdoctest: +IGNORE_WANT(\"non-deterministic\")\n"," |          >>> linear = nn.Linear(2, 2)\n"," |          >>> linear.weight\n"," |          Parameter containing:\n"," |          tensor([[ 0.1913, -0.3420],\n"," |                  [-0.5113, -0.2325]])\n"," |          >>> linear.to(torch.double)\n"," |          Linear(in_features=2, out_features=2, bias=True)\n"," |          >>> linear.weight\n"," |          Parameter containing:\n"," |          tensor([[ 0.1913, -0.3420],\n"," |                  [-0.5113, -0.2325]], dtype=torch.float64)\n"," |          >>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_CUDA1)\n"," |          >>> gpu1 = torch.device(\"cuda:1\")\n"," |          >>> linear.to(gpu1, dtype=torch.half, non_blocking=True)\n"," |          Linear(in_features=2, out_features=2, bias=True)\n"," |          >>> linear.weight\n"," |          Parameter containing:\n"," |          tensor([[ 0.1914, -0.3420],\n"," |                  [-0.5112, -0.2324]], dtype=torch.float16, device='cuda:1')\n"," |          >>> cpu = torch.device(\"cpu\")\n"," |          >>> linear.to(cpu)\n"," |          Linear(in_features=2, out_features=2, bias=True)\n"," |          >>> linear.weight\n"," |          Parameter containing:\n"," |          tensor([[ 0.1914, -0.3420],\n"," |                  [-0.5112, -0.2324]], dtype=torch.float16)\n"," |      \n"," |          >>> linear = nn.Linear(2, 2, bias=None).to(torch.cdouble)\n"," |          >>> linear.weight\n"," |          Parameter containing:\n"," |          tensor([[ 0.3741+0.j,  0.2382+0.j],\n"," |                  [ 0.5593+0.j, -0.4443+0.j]], dtype=torch.complex128)\n"," |          >>> linear(torch.ones(3, 2, dtype=torch.cdouble))\n"," |          tensor([[0.6122+0.j, 0.1150+0.j],\n"," |                  [0.6122+0.j, 0.1150+0.j],\n"," |                  [0.6122+0.j, 0.1150+0.j]], dtype=torch.complex128)\n"," |  \n"," |  to_empty(self: ~T, *, device: Union[str, torch.device]) -> ~T\n"," |      Moves the parameters and buffers to the specified device without copying storage.\n"," |      \n"," |      Args:\n"," |          device (:class:`torch.device`): The desired device of the parameters\n"," |              and buffers in this module.\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |  \n"," |  train(self: ~T, mode: bool = True) -> ~T\n"," |      Sets the module in training mode.\n"," |      \n"," |      This has any effect only on certain modules. See documentations of\n"," |      particular modules for details of their behaviors in training/evaluation\n"," |      mode, if they are affected, e.g. :class:`Dropout`, :class:`BatchNorm`,\n"," |      etc.\n"," |      \n"," |      Args:\n"," |          mode (bool): whether to set training mode (``True``) or evaluation\n"," |                       mode (``False``). Default: ``True``.\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |  \n"," |  type(self: ~T, dst_type: Union[torch.dtype, str]) -> ~T\n"," |      Casts all parameters and buffers to :attr:`dst_type`.\n"," |      \n"," |      .. note::\n"," |          This method modifies the module in-place.\n"," |      \n"," |      Args:\n"," |          dst_type (type or string): the desired type\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |  \n"," |  xpu(self: ~T, device: Union[int, torch.device, NoneType] = None) -> ~T\n"," |      Moves all model parameters and buffers to the XPU.\n"," |      \n"," |      This also makes associated parameters and buffers different objects. So\n"," |      it should be called before constructing optimizer if the module will\n"," |      live on XPU while being optimized.\n"," |      \n"," |      .. note::\n"," |          This method modifies the module in-place.\n"," |      \n"," |      Arguments:\n"," |          device (int, optional): if specified, all parameters will be\n"," |              copied to that device\n"," |      \n"," |      Returns:\n"," |          Module: self\n"," |  \n"," |  zero_grad(self, set_to_none: bool = True) -> None\n"," |      Sets gradients of all model parameters to zero. See similar function\n"," |      under :class:`torch.optim.Optimizer` for more context.\n"," |      \n"," |      Args:\n"," |          set_to_none (bool): instead of setting to zero, set the grads to None.\n"," |              See :meth:`torch.optim.Optimizer.zero_grad` for details.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors inherited from torch.nn.modules.module.Module:\n"," |  \n"," |  __dict__\n"," |      dictionary for instance variables (if defined)\n"," |  \n"," |  __weakref__\n"," |      list of weak references to the object (if defined)\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data and other attributes inherited from torch.nn.modules.module.Module:\n"," |  \n"," |  T_destination = ~T_destination\n"," |  \n"," |  call_super_init = False\n"," |  \n"," |  dump_patches = False\n","\n"]}],"source":["from torchvision.models.detection import FasterRCNN\n","help(FasterRCNN)"]}],"metadata":{"accelerator":"GPU","colab":{"machine_shape":"hm","provenance":[],"authorship_tag":"ABX9TyPFB70kLoN9qnDFvbP+hkQM"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}